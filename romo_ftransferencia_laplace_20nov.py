# -*- coding: utf-8 -*-
"""Romo_FTransferencia_Laplace_20Nov.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14nNObLOY_V0zg7nFEpLd91nMoNNfEHlJ
"""

import sympy as sym
from sympy.abc import s,t
import numpy as np
from sympy.calculus import util
from sympy.integrals import inverse_laplace_transform
import matplotlib.pyplot as plt

a = 6
b = 7
c = 8
d = 5
u1s= (1/s**2)*sym.exp(-s)
u2s=(-1/s**2)*sym.exp(-3*s)
u3s= (-1/s)*sym.exp(-6*s)

#G=(c*s+d)/((s**2)+(a+s)+b) 
'''
Con la función de transferencia calculada para el ejercicio, no puede graficarse.
Por lo tanto, usamos la función de transferencia dada en clase por el profesor bajo su consentimiento
'''

G = 5*(s+1)/(s+3)**2

y1s = G*u1s
y2s = G*u2s
y3s = G*u3s

y1t = inverse_laplace_transform(y1s,s,t)
y2t = inverse_laplace_transform(y2s,s,t)
y3t = inverse_laplace_transform(y3s,s,t)

u1t = inverse_laplace_transform(u1s,s,t)
u2t = inverse_laplace_transform(u2s,s,t)
u3t = inverse_laplace_transform(u3s,s,t)

tiempo = np.linspace(0,8,100)
ut = np.zeros(len(tiempo))
yt = np.zeros(len(tiempo))


for ui in [u1t,u2t,u3t]:
    #print(ui)
    for i in range(len(tiempo)):
        #print(ut[i])
        ut[i] += ui.subs(t,tiempo[i])
        
for yi in [y1t,y2t,y3t]:
    #print(ui)
    for i in range(len(tiempo)):
        #print(ut[i])
        yt[i] += yi.subs(t,tiempo[i])
        
plt.plot(tiempo,ut,tiempo,yt)
plt.xlabel('Tiempo')
plt.legend(('ut','yt'))
plt.show()

"""EJERCICIO 4
(s+3)**2
 Los polos son x1 = -3 ; x2= -3

Por lo tanto el sistema es estable ya que todas sus raíces son negativas
"""