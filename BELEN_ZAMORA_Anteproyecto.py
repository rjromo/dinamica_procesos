# -*- coding: utf-8 -*-
"""Untitled20.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mLViDlofVDFOhMR6N6hlIazG4hGbHPQv
"""

import numpy as np
from scipy.integrate import odeint
import matplotlib.pyplot as plt

Tin=300 #K
Tjin=298.15 #k
Xain=100 #mol/m^3
Xbin=0 #mol/m^3
b=-0.01196 #K*mol/m^3
lam1=0.191 #min^-1
lam2=0.574 #min^-1
Xa=8.3 #mol/m^3
ER=7290.11 #k
k0=1.3677e8 #min^-1

#dr=np.linspace(0.025,0.15,25)

dr = 0.075

#dj=np.linspace(0.005,0.015,25)

dj = [0.005,0.007,0.0095,0.012,0.015]   #valores de dj según el paper fig 3

def cstr(x,t,dj):
    Xa = x[0]
    Xb = x[1]
    T = x[2]
    Tj = x[3]
    k = k0*np.exp((-ER/float(T)))
    # Balance de masa
    dXadt=-k*Xa+dr*(Xain-Xa)
    dXbdt=-k*Xa+dr*(Xbin-Xb)
    dTdt=b*k*Xa+lam1*(Tj-T)+dr*(Tin-T)
    dTjdt=lam2*(Tj-T)+dj*(Tin-T)
    fun = [dXadt,dXbdt,dTdt,dTjdt]
    return(fun)

#t = np.linspace(0, 15,100)

ts=np.linspace(0.04,0.24,100) #vector de tiempo en min 



xo=[Xain,Xbin,Tin,Tjin] #Condiciones iniciales

# 5 valores de salida de Xa, uno para cada valor de dj

xa1=odeint(cstr,xo,ts,args=(dj[0],))
xa2=odeint(cstr,xo,ts,args=(dj[1],))
xa3=odeint(cstr,xo,ts,args=(dj[2],))
xa4=odeint(cstr,xo,ts,args=(dj[3],))
xa5=odeint(cstr,xo,ts,args=(dj[4],))

plt.title('Funciones no linealizadas')
plt.xlabel('Tiempo [min]')
plt.ylabel('Concentración [kmol/m^3'']')


#Graficando cada Xa
plt.plot(ts,xa1[:,0])
plt.plot(ts,xa2[:,0])
plt.plot(ts,xa3[:,0])
plt.plot(ts,xa4[:,0])
plt.plot(ts,xa5[:,0])

plt.legend(['Xa dj 0.005','Xa dj 0.007','Xa dj 0.0095',"Xa dj 0.012","Xa dj 0.015"])
plt.grid()
plt.show()

